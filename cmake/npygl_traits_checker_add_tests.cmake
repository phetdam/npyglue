cmake_minimum_required(VERSION 3.20)

##
# npygl_traits_checker_add_tests.cmake
#
# Provides CMake helper functions to register individual traits_checker tests
# with CTest similar to gtest_discover_tests.
#
# Note: traits_checker test listing and selection is still experimental.
#

##
# npyglue traits checker test discovery implementation.
#
# This is intended to be run by CTest in scripting mode. Requires variables:
#
#   NPYGL_TC_TARGET_NAME        Name of the traits checker driver target
#   NPYGL_TC_DRIVER_PATH        Path to the traits checker driver executable
#   NPYGL_TC_IMPL_SCRIPT        Path to the CMake script to add tests into
#
function(npygl_traits_checker_add_tests_impl)
    # fatal error if not defined
    if(NOT NPYGL_TC_TARGET_NAME)
        message(FATAL_ERROR "NPYGL_TC_TARGET_NAME is required")
    endif()
    if(NOT NPYGL_TC_DRIVER_PATH)
        message(FATAL_ERROR "NPYGL_TC_DRIVER_PATH is required")
    endif()
    if(NOT NPYGL_TC_IMPL_SCRIPT)
        message(FATAL_ERROR "NPYGL_TC_IMPL_SCRIPT is required")
    endif()
    # run the driver program with the -l option to list tests
    execute_process(
        COMMAND ${NPYGL_TC_DRIVER_PATH} -l
        TIMEOUT 10
        RESULT_VARIABLE _list_res
        OUTPUT_VARIABLE _test_list
        ERROR_VARIABLE _list_err
        OUTPUT_STRIP_TRAILING_WHITESPACE
        ERROR_STRIP_TRAILING_WHITESPACE
    )
    # if failed, print error
    if(_list_res)
        message(
            FATAL_ERROR
            "Could not get traits checker test list with -l:\n${_list_err}"
        )
    endif()
    # replace newline with ; to create a CMake list
    string(REPLACE "\n" ";" _test_list "${_test_list}")
    # create CMake script out of add_test() commands
    set(_add_test_script "# generated by ${CMAKE_CURRENT_FUNCTION}\n")
    foreach(_test ${_test_list})
        string(
            APPEND _add_test_script
"add_test(\n"
"    \"${NPYGL_TC_TARGET_NAME} -t ${_test}\"\n"
"    \"${NPYGL_TC_DRIVER_PATH}\" -t \"${_test}\"\n"
")\n"
"set_tests_properties(\n"
"    \"${NPYGL_TC_TARGET_NAME} -t ${_test}\" PROPERTIES\n"
"    SKIP_REGULAR_EXPRESSION \"SKIP\"\n"
")\n"
        )
    endforeach()
    # write to script
    file(WRITE "${NPYGL_TC_IMPL_SCRIPT}" "${_add_test_script}")
endfunction()

##
# npyglue traits checker test discovery function.
#
# This function, similar to gtest_discover_tests, hangs a post-build command
# that runs CMake in scripting mode to get the list of tests from a traits
# checker driver executable, use them to build a list of add_test() calls, and
# then also generate a master CMake script to be included by CTest.
#
# The master script will be included by CTest via use of TEST_INCLUDE_FILES and
# uses CTEST_CONFIGURATION_TYPE as necessary for multi-config generators. Any
# tests that report "SKIP" as their status are marked as skipped.
#
# Note:
#
# This set_tests_properties usage relies on undocumented behavior. Using
# add_test from a CMake script is already somewhat undocumented.
#
# Arguments:
#   target      npyglue traits checker driver target
#
function(npygl_traits_checker_add_tests target)
    # name of the master script with its directory
    set(_script_prefix "${PROJECT_BINARY_DIR}/${target}_add_tests")
    # run post-build command
    add_custom_command(
        TARGET ${target} POST_BUILD
        COMMAND ${CMAKE_COMMAND}
                -DNPYGL_TC_TARGET_NAME=${target}
                -DNPYGL_TC_DRIVER_PATH=$<TARGET_FILE:${target}>
                -DNPYGL_TC_IMPL_SCRIPT=${_script_prefix}-$<IF:${NPYGL_MULTI_CONFIG_GENERATOR},$<CONFIG>,impl>.cmake
                -P ${PROJECT_SOURCE_DIR}/cmake/npygl_traits_checker_add_tests.cmake
        COMMENT "Discovering ${target} tests"
        VERBATIM
    )
    # generate CMake script for this target. for multi-config generators, we
    # need to ensure that CTest is being run with -C
    if(NPYGL_MULTI_CONFIG_GENERATOR)
        string(
            CONCAT _add_tests_script
"# generated by ${CMAKE_CURRENT_FUNCTION}\n"
"if(NOT CTEST_CONFIGURATION_TYPE)\n"
"    message(\n"
"        WARNING\n"
"        \"No -C <config> specified for multi-config generator \"\n"
"\"${CMAKE_GENERATOR}. ${target} tests will not be run.\"\n"
"    )\n"
"else()\n"
"    include(\"${_script_prefix}-\${CTEST_CONFIGURATION_TYPE}.cmake\")\n"
"endif()\n"
        )
    else()
        string(
            CONCAT _add_tests_script
"# generated by ${CMAKE_CURRENT_FUNCTION}\n"
"include(\"${_script_prefix}-impl.cmake\")\n"
        )
    endif()
    # write to actual script location
    file(WRITE "${_script_prefix}.cmake" "${_add_tests_script}")
    # tell CTest to include the master script
    set_property(
        DIRECTORY APPEND PROPERTY
        TEST_INCLUDE_FILES "${_script_prefix}.cmake"
    )
endfunction()

# only run in script mode
if(CMAKE_SCRIPT_MODE_FILE)
    npygl_traits_checker_add_tests_impl()
endif()
